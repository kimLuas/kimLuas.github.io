package model.movie;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import hah.JDBC;
import model.book.BookVO;

public class MovieDAO {
	static String sql_SELECT_ALL = "SELECT * FROM movie ORDER BY mNum ASC"; // 모든 영화정보 출력
	static String sql_SELECT_GENRE = "SELECT * FROM movie WHERE mGenre=? ORDER BY mNum ASC";
	static String sql_SELECT_MNUM = "SELECT * FROM movie WHERE mNum=? ORDER BY mNum ASC";
	static String sql_INSERT = "INSERT INTO movie VALUES ((SELECT NVL(MAX(mNum),0)+1 FROM movie),?,?,?,?,?)";
	static String sql_UPDATE = "UPDATE movie SET mName=?, mGenre=?, mRuntime=?, mCast=?, mInfo=? WHERE mNum=?";
	static String sql_DELETE = "DELETE FROM movie WHERE mNum=?";

	private Connection conn = null;
	private PreparedStatement pstmt = null;
	// 멤버변수 선언

//관리자 접근 패스워드 확인========================================================================
	public boolean adminCheck(MovieVO vo) {
		boolean check = false; // 아래의 조건 불만족 시 false 반환
		if (vo.getPassword() == -1) { // 관리자 패스워드 : -1, 입력 시 true 반환
			check = true;
		}
		//System.out.println("관리자 확인 작업");
		return check;
	}

//영화 정보 전체 select========================================================================
	public ArrayList<MovieVO> getMovieList(MovieVO vo) {
		conn = JDBC.getConnection();
		ArrayList<MovieVO> datas = new ArrayList();
		try {
			pstmt = conn.prepareStatement(sql_SELECT_ALL);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				MovieVO data = new MovieVO();
				data.setmNum(rs.getInt("mNum"));
				data.setmName(rs.getString("mName"));
				data.setmGenre(rs.getString("mGenre"));
				data.setmRuntime(rs.getString("mRuntime"));
				data.setmCast(rs.getString("mCast"));
				data.setmInfo(rs.getString("mInfo"));
				datas.add(data);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBC.close(conn, pstmt);
		}
		//System.out.println("getMovieList() 수행완료"); // 실행되는거 확인되면 주석처리
		return datas;
	}

	// 인자로 받은 영화제목의 고유넘버 select===================================================================
	public ArrayList<MovieVO> getMnumList(MovieVO vo) {
		conn = JDBC.getConnection();
		//MovieVO data = new MovieVO();
		ArrayList<MovieVO> datas = new ArrayList();
		try {
			pstmt = conn.prepareStatement(sql_SELECT_MNUM);
			pstmt.setInt(1, vo.getmNum());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				MovieVO data = new MovieVO();
				data.setmNum(rs.getInt("mNum"));
				data.setmName(rs.getString("mName"));
				data.setmGenre(rs.getString("mGenre"));
				data.setmRuntime(rs.getString("mRuntime"));
				data.setmCast(rs.getString("mCast"));
				data.setmInfo(rs.getString("mInfo"));
				datas.add(data);
			}
		}
		catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBC.close(conn, pstmt);
		}
		//System.out.println("getMnumList() 수행완료"); // 실행되는거 확인되면 주석처리
		return datas;
	}
	
	
	public MovieVO checkMnum(BookVO vo) {
	      conn=JDBC.getConnection(); // JDBC 클래스에서 만든 커넥션 연결
	      
	      MovieVO data=null; // 임의로 'data'라는 BookVO 클래스 만들어서
	      try {
	         pstmt=conn.prepareStatement(sql_SELECT_MNUM); // 위에 있는 sql문으로 
	         // select * from book where ticket=? : SQL_SELECT_ONE
	         pstmt.setInt(1, vo.getmNum()); // ?에 예약자에게 입력받은 티켓넘버 넣고
	         ResultSet rs=pstmt.executeQuery(); // DB에 저장된 정보 불러와서
	         if(rs.next()) { // 그 정보를
	            data=new MovieVO(); // 임의로 만들어놓은 'data'에  
	            data.setmNum(rs.getInt("mNum"));
				data.setmName(rs.getString("mName"));
				data.setmGenre(rs.getString("mGenre"));
				data.setmRuntime(rs.getString("mRuntime"));
				data.setmCast(rs.getString("mCast"));
				data.setmInfo(rs.getString("mInfo"));
	         }
	         rs.close(); // 다 쓰고 rs 바로 닫음
	      } catch (SQLException e) {
	         e.printStackTrace();
	      } finally {
	         JDBC.close(conn, pstmt); // Connection&PrepareStatement close!!
	      }
	      return data; // 그리고 불러온 정보 임의저장한 'data' 리턴!
	   }
	
	public MovieVO delMnum(MovieVO vo) {
	      conn=JDBC.getConnection(); // JDBC 클래스에서 만든 커넥션 연결
	      
	      MovieVO data=null; // 임의로 'data'라는 BookVO 클래스 만들어서
	      try {
	         pstmt=conn.prepareStatement(sql_SELECT_MNUM); // 위에 있는 sql문으로 
	         // select * from book where ticket=? : SQL_SELECT_ONE
	         pstmt.setInt(1, vo.getmNum()); // ?에 예약자에게 입력받은 티켓넘버 넣고
	         ResultSet rs=pstmt.executeQuery(); // DB에 저장된 정보 불러와서
	         if(rs.next()) { // 그 정보를
	            data=new MovieVO(); // 임의로 만들어놓은 'data'에  
	            data.setmNum(rs.getInt("mNum"));
				data.setmName(rs.getString("mName"));
				data.setmGenre(rs.getString("mGenre"));
				data.setmRuntime(rs.getString("mRuntime"));
				data.setmCast(rs.getString("mCast"));
				data.setmInfo(rs.getString("mInfo"));
	         }
	         rs.close(); // 다 쓰고 rs 바로 닫음
	      } catch (SQLException e) {
	         e.printStackTrace();
	      } finally {
	         JDBC.close(conn, pstmt); // Connection&PrepareStatement close!!
	      }
	      return data; // 그리고 불러온 정보 임의저장한 'data' 리턴!
	   }
	
//장르를 인자로 받고 해당 장르의 영화 select===================================================================
	public ArrayList<MovieVO> getGenreList(MovieVO vo) {
		conn = JDBC.getConnection();
		ArrayList<MovieVO> datas = new ArrayList();
		try {
			pstmt = conn.prepareStatement(sql_SELECT_GENRE);
			pstmt.setString(1, vo.getmGenre());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				MovieVO data = new MovieVO();
				data.setmNum(rs.getInt("mNum"));
				data.setmName(rs.getString("mName"));
				data.setmGenre(rs.getString("mGenre"));
				data.setmRuntime(rs.getString("mRuntime"));
				data.setmCast(rs.getString("mCast"));
				data.setmInfo(rs.getString("mInfo"));
				datas.add(data);
			}
		}
		catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBC.close(conn, pstmt);
		}
		//System.out.println("getMovieList() 수행완료"); // 실행되는거 확인되면 주석처리
		return datas;
	}
	
	public MovieVO checkMgenre(MovieVO vo) {
	      conn=JDBC.getConnection(); // JDBC 클래스에서 만든 커넥션 연결
	      
	      MovieVO data=null; // 임의로 'data'라는 BookVO 클래스 만들어서
	      try {
	         pstmt=conn.prepareStatement(sql_SELECT_GENRE); // 위에 있는 sql문으로 
	         // select * from book where ticket=? : SQL_SELECT_ONE
	         pstmt.setString(1, vo.getmGenre()); // ?에 예약자에게 입력받은 티켓넘버 넣고
	         ResultSet rs=pstmt.executeQuery(); // DB에 저장된 정보 불러와서
	         if(rs.next()) { // 그 정보를
	            data=new MovieVO(); // 임의로 만들어놓은 'data'에  
	            data.setmNum(rs.getInt("mNum"));
				data.setmName(rs.getString("mName"));
				data.setmGenre(rs.getString("mGenre"));
				data.setmRuntime(rs.getString("mRuntime"));
				data.setmCast(rs.getString("mCast"));
				data.setmInfo(rs.getString("mInfo"));
	         }
	         rs.close(); // 다 쓰고 rs 바로 닫음
	      } catch (SQLException e) {
	         e.printStackTrace();
	      } finally {
	         JDBC.close(conn, pstmt); // Connection&PrepareStatement close!!
	      }
	      return data; // 그리고 불러온 정보 임의저장한 'data' 리턴!
	   }

	// 영화 추가=====================================================================
	public void insertMovie(MovieVO vo) {
		conn = JDBC.getConnection();
		try {
			pstmt = conn.prepareStatement(sql_INSERT);
			pstmt.setString(1, vo.getmName());
			pstmt.setString(2, vo.getmGenre());
			pstmt.setString(3, vo.getmRuntime());
			pstmt.setString(4, vo.getmCast());
			pstmt.setString(5, vo.getmInfo());
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBC.close(conn, pstmt);
		}
		//System.out.println("insertMovie() 수행완료"); // 실행되는거 확인되면 주석처리
	}

	// 영화 변경=====================================================================
	public void updateMovie(MovieVO vo) { // 정보 전부 변경

		conn = JDBC.getConnection();
		try {
			pstmt = conn.prepareStatement(sql_UPDATE);
			pstmt.setString(1, vo.getmName());
			pstmt.setString(2, vo.getmGenre());
			pstmt.setString(3, vo.getmRuntime()); // rs.setmName("vo.getmName");
			pstmt.setString(4, vo.getmCast());
			pstmt.setString(5, vo.getmInfo());
			pstmt.setInt(6, vo.getmNum());
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBC.close(conn, pstmt);
		}
		//System.out.println("updateMovie() 수행완료"); // 실행되는거 확인되면 주석처리
	}

// 영화 삭제=====================================================================
	public void deleteMovie(MovieVO vo) {

		conn = JDBC.getConnection();
		try {
			pstmt = conn.prepareStatement(sql_DELETE);
			pstmt.setInt(1, vo.getmNum()); // mNum 인자받아 해당 영화 삭제
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBC.close(conn, pstmt);
		}
		//System.out.println("deleteMovie() 수행완료"); // 실행되는거 확인되면 주석처리
	}
}
